// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// A data class for passing ranging results from native to Dart.
///
/// Generated class from Pigeon that represents data sent in messages.
struct RangingResult {
  var address: String
  var distance: Double
  var azimuth: Double
  var elevation: Double

  static func fromList(_ list: [Any?]) -> RangingResult? {
    let address = list[0] as! String
    let distance = list[1] as! Double
    let azimuth = list[2] as! Double
    let elevation = list[3] as! Double

    return RangingResult(
      address: address,
      distance: distance,
      azimuth: azimuth,
      elevation: elevation
    )
  }
  func toList() -> [Any?] {
    return [
      address,
      distance,
      azimuth,
      elevation,
    ]
  }
}

/// The API exposed by the native platform to be called from Dart.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  /// Stops any ongoing UWB session.
  func stopRanging(completion: @escaping (Result<Void, Error>) -> Void)
  /// Retrieves the local device's NIDiscoveryToken for sharing. (iOS only)
  func getPeerDiscoveryToken(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  /// Starts a peer-to-peer ranging session. (iOS only)
  func startPeerRanging(token: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
  /// Retrieves the accessory's configuration data to be sent to a controller.
  func getAccessoryConfigurationData(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  /// Starts a ranging session as a Controller, using the accessory's data.
  /// Returns the shareable configuration data to be sent back to the accessory.
  func startControllerRanging(accessoryData: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  /// Starts a ranging session as an Accessory, using the controller's shareable data.
  func startAccessoryRanging(shareableData: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  /// The codec used by UwbHostApi.
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?) {
    /// Stops any ongoing UWB session.
    let stopRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      stopRangingChannel.setMessageHandler { _, reply in
        api.stopRanging { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    /// Retrieves the local device's NIDiscoveryToken for sharing. (iOS only)
    let getPeerDiscoveryTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getPeerDiscoveryToken", binaryMessenger: binaryMessenger)
    if let api = api {
      getPeerDiscoveryTokenChannel.setMessageHandler { _, reply in
        api.getPeerDiscoveryToken { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPeerDiscoveryTokenChannel.setMessageHandler(nil)
    }
    /// Starts a peer-to-peer ranging session. (iOS only)
    let startPeerRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startPeerRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      startPeerRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tokenArg = args[0] as! FlutterStandardTypedData
        api.startPeerRanging(token: tokenArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startPeerRangingChannel.setMessageHandler(nil)
    }
    /// Retrieves the accessory's configuration data to be sent to a controller.
    let getAccessoryConfigurationDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getAccessoryConfigurationData", binaryMessenger: binaryMessenger)
    if let api = api {
      getAccessoryConfigurationDataChannel.setMessageHandler { _, reply in
        api.getAccessoryConfigurationData { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAccessoryConfigurationDataChannel.setMessageHandler(nil)
    }
    /// Starts a ranging session as a Controller, using the accessory's data.
    /// Returns the shareable configuration data to be sent back to the accessory.
    let startControllerRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startControllerRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      startControllerRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accessoryDataArg = args[0] as! FlutterStandardTypedData
        api.startControllerRanging(accessoryData: accessoryDataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startControllerRangingChannel.setMessageHandler(nil)
    }
    /// Starts a ranging session as an Accessory, using the controller's shareable data.
    let startAccessoryRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startAccessoryRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      startAccessoryRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let shareableDataArg = args[0] as! FlutterStandardTypedData
        api.startAccessoryRanging(shareableData: shareableDataArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startAccessoryRangingChannel.setMessageHandler(nil)
    }
  }
}
private class UwbFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return RangingResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RangingResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbFlutterApiCodecWriter(data: data)
  }
}

class UwbFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbFlutterApiCodec(readerWriter: UwbFlutterApiCodecReaderWriter())
}

/// The API exposed by Dart to be called from the native platform.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return UwbFlutterApiCodec.shared
  }
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
