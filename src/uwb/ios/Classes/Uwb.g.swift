// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum DeviceType: Int {
  case smartphone = 0
  case accessory = 1
}

enum ErrorCode: Int {
  case oOBERROR = 0
  case oOBDEVICEALREADYCONNECTED = 1
  case oOBCONNECTIONERROR = 2
  case oOBDEVICENOTFOUND = 3
  case oOBALREADYADVERTISING = 4
  case oOBALREADYDISCOVERING = 5
  case oOBSENDINGDATAFAILED = 6
  case uWBERROR = 7
  case uWBTOOMANYSESSIONS = 8
}

enum PermissionAction: Int {
  case request = 0
  case restart = 1
}

enum DeviceState: Int {
  case connected = 0
  case disconnected = 1
  case found = 2
  case lost = 3
  case rejected = 4
  case pending = 5
  case ranging = 6
}

/// Direction for iOS
///
/// Generated class from Pigeon that represents data sent in messages.
struct Direction3D {
  /// The x component of the vector.
  var x: Double
  /// The y component of the vector.
  var y: Double
  /// The z component of the vector.
  var z: Double

  static func fromList(_ list: [Any?]) -> Direction3D? {
    let x = list[0] as! Double
    let y = list[1] as! Double
    let z = list[2] as! Double

    return Direction3D(
      x: x,
      y: y,
      z: z
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
      z,
    ]
  }
}

/// UWB Data for Android and iOS
///
/// Generated class from Pigeon that represents data sent in messages.
struct UwbData {
  /// Android API: The line-of-sight distance in meters of the ranging device, or null if not available.
  /// Apple API: The distance from the user's device to the peer device in meters.
  var distance: Double? = nil
  /// Android API: The azimuth angle in degrees of the ranging device, or null if not available.
  var azimuth: Double? = nil
  /// Android API: The elevation angle in degrees of the ranging device, or null if not available.
  var elevation: Double? = nil
  /// Apple API: A vector that points from the userâ€™s device in the direction of the peer device.
  /// If direction is null, the peer device is out of view.
  var direction: Direction3D? = nil
  /// Apple API: An angle in radians that indicates the azimuthal direction to the nearby object.
  /// The framework sets a value of this property when cameraAssistanceEnabled is true.
  /// iOS: >= iOS 16.0
  var horizontalAngle: Double? = nil

  static func fromList(_ list: [Any?]) -> UwbData? {
    let distance: Double? = nilOrValue(list[0])
    let azimuth: Double? = nilOrValue(list[1])
    let elevation: Double? = nilOrValue(list[2])
    var direction: Direction3D? = nil
    if let directionList: [Any?] = nilOrValue(list[3]) {
      direction = Direction3D.fromList(directionList)
    }
    let horizontalAngle: Double? = nilOrValue(list[4])

    return UwbData(
      distance: distance,
      azimuth: azimuth,
      elevation: elevation,
      direction: direction,
      horizontalAngle: horizontalAngle
    )
  }
  func toList() -> [Any?] {
    return [
      distance,
      azimuth,
      elevation,
      direction?.toList(),
      horizontalAngle,
    ]
  }
}

/// Represents a UWB device for Android and iOS.
///
/// Generated class from Pigeon that represents data sent in messages.
struct UwbDevice {
  var id: String
  var name: String
  var uwbData: UwbData? = nil
  var deviceType: DeviceType
  var state: DeviceState? = nil

  static func fromList(_ list: [Any?]) -> UwbDevice? {
    let id = list[0] as! String
    let name = list[1] as! String
    var uwbData: UwbData? = nil
    if let uwbDataList: [Any?] = nilOrValue(list[2]) {
      uwbData = UwbData.fromList(uwbDataList)
    }
    let deviceType = DeviceType(rawValue: list[3] as! Int)!
    var state: DeviceState? = nil
    let stateEnumVal: Int? = nilOrValue(list[4])
    if let stateRawValue = stateEnumVal {
      state = DeviceState(rawValue: stateRawValue)!
    }

    return UwbDevice(
      id: id,
      name: name,
      uwbData: uwbData,
      deviceType: deviceType,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      uwbData?.toList(),
      deviceType.rawValue,
      state?.rawValue,
    ]
  }
}

private class UwbHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return Direction3D.fromList(self.readValue() as! [Any?])
    case 129:
      return UwbData.fromList(self.readValue() as! [Any?])
    case 130:
      return UwbDevice.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Direction3D {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? UwbData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? UwbDevice {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbHostApiCodecWriter(data: data)
  }
}

class UwbHostApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbHostApiCodec(readerWriter: UwbHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func discoverDevices(deviceName: String, completion: @escaping (Result<Void, Error>) -> Void)
  func stopDiscovery(completion: @escaping (Result<Void, Error>) -> Void)
  func handleConnectionRequest(device: UwbDevice, accept: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func isUwbSupported(completion: @escaping (Result<Bool, Error>) -> Void)
  func startRanging(device: UwbDevice, completion: @escaping (Result<Void, Error>) -> Void)
  func stopRanging(device: UwbDevice, completion: @escaping (Result<Void, Error>) -> Void)
  func stopUwbSessions(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  /// The codec used by UwbHostApi.
  static var codec: FlutterStandardMessageCodec { UwbHostApiCodec.shared }
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?) {
    let discoverDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.discoverDevices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverDevicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceNameArg = args[0] as! String
        api.discoverDevices(deviceName: deviceNameArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      discoverDevicesChannel.setMessageHandler(nil)
    }
    let stopDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopDiscovery", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopDiscoveryChannel.setMessageHandler { _, reply in
        api.stopDiscovery { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopDiscoveryChannel.setMessageHandler(nil)
    }
    let handleConnectionRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.handleConnectionRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleConnectionRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg = args[0] as! UwbDevice
        let acceptArg = args[1] as! Bool
        api.handleConnectionRequest(device: deviceArg, accept: acceptArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      handleConnectionRequestChannel.setMessageHandler(nil)
    }
    let isUwbSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isUwbSupportedChannel.setMessageHandler { _, reply in
        api.isUwbSupported { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isUwbSupportedChannel.setMessageHandler(nil)
    }
    let startRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg = args[0] as! UwbDevice
        api.startRanging(device: deviceArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startRangingChannel.setMessageHandler(nil)
    }
    let stopRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg = args[0] as! UwbDevice
        api.stopRanging(device: deviceArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    let stopUwbSessionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopUwbSessionsChannel.setMessageHandler { _, reply in
        api.stopUwbSessions { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopUwbSessionsChannel.setMessageHandler(nil)
    }
  }
}
private class UwbFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return Direction3D.fromList(self.readValue() as! [Any?])
    case 129:
      return UwbData.fromList(self.readValue() as! [Any?])
    case 130:
      return UwbDevice.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Direction3D {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? UwbData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? UwbDevice {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbFlutterApiCodecWriter(data: data)
  }
}

class UwbFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbFlutterApiCodec(readerWriter: UwbFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onHostDiscoveryDeviceConnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostDiscoveryDeviceDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostDiscoveryDeviceFound(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostDiscoveryDeviceLost(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostDiscoveryDeviceRejected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostDiscoveryConnectionRequestReceived(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostPermissionRequired(action actionArg: PermissionAction, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostUwbSessionStarted(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onHostUwbSessionDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func _buildTrigger(code codeArg: ErrorCode, state stateArg: DeviceState, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return UwbFlutterApiCodec.shared
  }
  func onHostDiscoveryDeviceConnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceConnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostDiscoveryDeviceDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceDisconnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostDiscoveryDeviceFound(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceFound"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostDiscoveryDeviceLost(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceLost"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostDiscoveryDeviceRejected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceRejected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostDiscoveryConnectionRequestReceived(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryConnectionRequestReceived"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostPermissionRequired(action actionArg: PermissionAction, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostPermissionRequired"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([actionArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostUwbSessionStarted(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionStarted"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onHostUwbSessionDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionDisconnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func _buildTrigger(code codeArg: ErrorCode, state stateArg: DeviceState, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi._buildTrigger"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([codeArg.rawValue, stateArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
