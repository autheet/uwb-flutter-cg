// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct RangingResult {
  var peerAddress: String
  var deviceName: String
  var distance: Double? = nil
  var azimuth: Double? = nil
  var elevation: Double? = nil

  static func fromList(_ list: [Any?]) -> RangingResult? {
    let peerAddress = list[0] as! String
    let deviceName = list[1] as! String
    let distance: Double? = nilOrValue(list[2])
    let azimuth: Double? = nilOrValue(list[3])
    let elevation: Double? = nilOrValue(list[4])

    return RangingResult(
      peerAddress: peerAddress,
      deviceName: deviceName,
      distance: distance,
      azimuth: azimuth,
      elevation: elevation
    )
  }
  func toList() -> [Any?] {
    return [
      peerAddress,
      deviceName,
      distance,
      azimuth,
      elevation,
    ]
  }
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func start(deviceName: String, serviceUUIDDigest: String, completion: @escaping (Result<Void, Error>) -> Void)
  func stop(completion: @escaping (Result<Void, Error>) -> Void)
  func startIosController(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func startIosAccessory(token: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
  func getAndroidAccessoryConfigurationData(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func initializeAndroidController(accessoryConfigurationData: FlutterStandardTypedData, sessionKeyInfo: FlutterStandardTypedData, sessionId: Int64, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func startAndroidRanging(configData: FlutterStandardTypedData, isController: Bool, sessionKeyInfo: FlutterStandardTypedData, sessionId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  /// The codec used by UwbHostApi.
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?) {
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.start", binaryMessenger: binaryMessenger)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceNameArg = args[0] as! String
        let serviceUUIDDigestArg = args[1] as! String
        api.start(deviceName: deviceNameArg, serviceUUIDDigest: serviceUUIDDigestArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stop", binaryMessenger: binaryMessenger)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        api.stop { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let startIosControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startIosController", binaryMessenger: binaryMessenger)
    if let api = api {
      startIosControllerChannel.setMessageHandler { _, reply in
        api.startIosController { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startIosControllerChannel.setMessageHandler(nil)
    }
    let startIosAccessoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startIosAccessory", binaryMessenger: binaryMessenger)
    if let api = api {
      startIosAccessoryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tokenArg = args[0] as! FlutterStandardTypedData
        api.startIosAccessory(token: tokenArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startIosAccessoryChannel.setMessageHandler(nil)
    }
    let getAndroidAccessoryConfigurationDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getAndroidAccessoryConfigurationData", binaryMessenger: binaryMessenger)
    if let api = api {
      getAndroidAccessoryConfigurationDataChannel.setMessageHandler { _, reply in
        api.getAndroidAccessoryConfigurationData { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAndroidAccessoryConfigurationDataChannel.setMessageHandler(nil)
    }
    let initializeAndroidControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.initializeAndroidController", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeAndroidControllerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accessoryConfigurationDataArg = args[0] as! FlutterStandardTypedData
        let sessionKeyInfoArg = args[1] as! FlutterStandardTypedData
        let sessionIdArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.initializeAndroidController(accessoryConfigurationData: accessoryConfigurationDataArg, sessionKeyInfo: sessionKeyInfoArg, sessionId: sessionIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeAndroidControllerChannel.setMessageHandler(nil)
    }
    let startAndroidRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startAndroidRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      startAndroidRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configDataArg = args[0] as! FlutterStandardTypedData
        let isControllerArg = args[1] as! Bool
        let sessionKeyInfoArg = args[2] as! FlutterStandardTypedData
        let sessionIdArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.startAndroidRanging(configData: configDataArg, isController: isControllerArg, sessionKeyInfo: sessionKeyInfoArg, sessionId: sessionIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startAndroidRangingChannel.setMessageHandler(nil)
    }
  }
}
private class UwbFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return RangingResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RangingResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbFlutterApiCodecWriter(data: data)
  }
}

class UwbFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbFlutterApiCodec(readerWriter: UwbFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onBleDataReceived(data dataArg: FlutterStandardTypedData, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onPeerDiscovered(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onPeerLost(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return UwbFlutterApiCodec.shared
  }
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBleDataReceived(data dataArg: FlutterStandardTypedData, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onBleDataReceived"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onPeerDiscovered(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDiscovered"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceNameArg, peerAddressArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onPeerLost(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerLost"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceNameArg, peerAddressArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
