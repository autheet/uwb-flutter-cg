// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsUwb(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsUwb(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsUwb(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashUwb(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashUwb(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashUwb(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct RangingResult: Hashable {
  var peerAddress: String
  var deviceName: String
  var distance: Double? = nil
  var azimuth: Double? = nil
  var elevation: Double? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> RangingResult? {
    let peerAddress = pigeonVar_list[0] as! String
    let deviceName = pigeonVar_list[1] as! String
    let distance: Double? = nilOrValue(pigeonVar_list[2])
    let azimuth: Double? = nilOrValue(pigeonVar_list[3])
    let elevation: Double? = nilOrValue(pigeonVar_list[4])

    return RangingResult(
      peerAddress: peerAddress,
      deviceName: deviceName,
      distance: distance,
      azimuth: azimuth,
      elevation: elevation
    )
  }
  func toList() -> [Any?] {
    return [
      peerAddress,
      deviceName,
      distance,
      azimuth,
      elevation,
    ]
  }
  static func == (lhs: RangingResult, rhs: RangingResult) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

/// A data class to hold all necessary UWB configuration parameters for the
/// FiRa accessory protocol. This ensures that both the controller and accessory
/// are using the exact same settings for the ranging session.
///
/// Generated class from Pigeon that represents data sent in messages.
struct UwbConfig: Hashable {
  /// Corresponds to RangingParameters.UwbConfigId (e.g., CONFIG_UNICAST_DS_TWR).
  var uwbConfigId: Int64
  /// The session ID for the ranging interaction.
  var sessionId: Int64
  /// The session key for securing the ranging data.
  var sessionKeyInfo: FlutterStandardTypedData
  /// The UWB channel to be used.
  var channel: Int64
  /// The preamble index for the UWB signal.
  var preambleIndex: Int64
  /// The UWB address of the peer device (the one not generating this config).
  var peerAddress: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UwbConfig? {
    let uwbConfigId = pigeonVar_list[0] as! Int64
    let sessionId = pigeonVar_list[1] as! Int64
    let sessionKeyInfo = pigeonVar_list[2] as! FlutterStandardTypedData
    let channel = pigeonVar_list[3] as! Int64
    let preambleIndex = pigeonVar_list[4] as! Int64
    let peerAddress = pigeonVar_list[5] as! FlutterStandardTypedData

    return UwbConfig(
      uwbConfigId: uwbConfigId,
      sessionId: sessionId,
      sessionKeyInfo: sessionKeyInfo,
      channel: channel,
      preambleIndex: preambleIndex,
      peerAddress: peerAddress
    )
  }
  func toList() -> [Any?] {
    return [
      uwbConfigId,
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
      peerAddress,
    ]
  }
  static func == (lhs: UwbConfig, rhs: UwbConfig) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

private class UwbPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return RangingResult.fromList(self.readValue() as! [Any?])
    case 130:
      return UwbConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RangingResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? UwbConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbPigeonCodecWriter(data: data)
  }
}

class UwbPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = UwbPigeonCodec(readerWriter: UwbPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func start(deviceName: String, serviceUUIDDigest: String, completion: @escaping (Result<Void, Error>) -> Void)
  func stop(completion: @escaping (Result<Void, Error>) -> Void)
  func startIosController(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func startIosAccessory(token: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
  func getAccessoryAddress(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func generateControllerConfig(accessoryAddress: FlutterStandardTypedData, sessionKeyInfo: FlutterStandardTypedData, sessionId: Int64, completion: @escaping (Result<UwbConfig, Error>) -> Void)
  func startAccessoryRanging(config: UwbConfig, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  static var codec: FlutterStandardMessageCodec { UwbPigeonCodec.shared }
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.start\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceNameArg = args[0] as! String
        let serviceUUIDDigestArg = args[1] as! String
        api.start(deviceName: deviceNameArg, serviceUUIDDigest: serviceUUIDDigestArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stop\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        api.stop { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let startIosControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startIosController\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startIosControllerChannel.setMessageHandler { _, reply in
        api.startIosController { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startIosControllerChannel.setMessageHandler(nil)
    }
    let startIosAccessoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startIosAccessory\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startIosAccessoryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tokenArg = args[0] as! FlutterStandardTypedData
        api.startIosAccessory(token: tokenArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startIosAccessoryChannel.setMessageHandler(nil)
    }
    let getAccessoryAddressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getAccessoryAddress\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAccessoryAddressChannel.setMessageHandler { _, reply in
        api.getAccessoryAddress { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAccessoryAddressChannel.setMessageHandler(nil)
    }
    let generateControllerConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.generateControllerConfig\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateControllerConfigChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accessoryAddressArg = args[0] as! FlutterStandardTypedData
        let sessionKeyInfoArg = args[1] as! FlutterStandardTypedData
        let sessionIdArg = args[2] as! Int64
        api.generateControllerConfig(accessoryAddress: accessoryAddressArg, sessionKeyInfo: sessionKeyInfoArg, sessionId: sessionIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      generateControllerConfigChannel.setMessageHandler(nil)
    }
    let startAccessoryRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startAccessoryRanging\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAccessoryRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! UwbConfig
        api.startAccessoryRanging(config: configArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startAccessoryRangingChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onBleDataReceived(data dataArg: FlutterStandardTypedData, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onPeerDiscovered(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onPeerLost(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: UwbPigeonCodec {
    return UwbPigeonCodec.shared
  }
  func onRangingResult(result resultArg: RangingResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onBleDataReceived(data dataArg: FlutterStandardTypedData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onBleDataReceived\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onPeerDiscovered(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDiscovered\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceNameArg, peerAddressArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onPeerLost(deviceName deviceNameArg: String, peerAddress peerAddressArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerLost\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceNameArg, peerAddressArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
