// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbRangingData {
  var distance: Double? = nil
  var azimuth: Double? = nil
  var elevation: Double? = nil

  static func fromList(_ list: [Any?]) -> UwbRangingData? {
    let distance: Double? = nilOrValue(list[0])
    let azimuth: Double? = nilOrValue(list[1])
    let elevation: Double? = nilOrValue(list[2])

    return UwbRangingData(
      distance: distance,
      azimuth: azimuth,
      elevation: elevation
    )
  }
  func toList() -> [Any?] {
    return [
      distance,
      azimuth,
      elevation,
    ]
  }
}

/// Represents a UWB-capable device.
/// The name is discovered via the out-of-band BLE channel.
/// The rangingData is nullable because a device might be discovered via BLE
/// before UWB ranging has started.
///
/// Generated class from Pigeon that represents data sent in messages.
struct UwbDevice {
  var address: FlutterStandardTypedData
  var name: String
  var rangingData: UwbRangingData? = nil

  static func fromList(_ list: [Any?]) -> UwbDevice? {
    let address = list[0] as! FlutterStandardTypedData
    let name = list[1] as! String
    var rangingData: UwbRangingData? = nil
    if let rangingDataList: [Any?] = nilOrValue(list[2]) {
      rangingData = UwbRangingData.fromList(rangingDataList)
    }

    return UwbDevice(
      address: address,
      name: name,
      rangingData: rangingData
    )
  }
  func toList() -> [Any?] {
    return [
      address,
      name,
      rangingData?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbSessionConfig {
  var sessionId: Int64
  var sessionKeyInfo: FlutterStandardTypedData? = nil
  var channel: Int64
  var preambleIndex: Int64

  static func fromList(_ list: [Any?]) -> UwbSessionConfig? {
    let sessionId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let sessionKeyInfo: FlutterStandardTypedData? = nilOrValue(list[1])
    let channel = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let preambleIndex = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)

    return UwbSessionConfig(
      sessionId: sessionId,
      sessionKeyInfo: sessionKeyInfo,
      channel: channel,
      preambleIndex: preambleIndex
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    ]
  }
}

private class UwbHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return UwbSessionConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? UwbSessionConfig {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbHostApiCodecWriter(data: data)
  }
}

class UwbHostApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbHostApiCodec(readerWriter: UwbHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func getLocalUwbAddress(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func isUwbSupported() throws -> Bool
  func startRanging(peerAddress: FlutterStandardTypedData, config: UwbSessionConfig, isAccessory: Bool) throws
  func stopRanging(peerAddress: FlutterStandardTypedData) throws
  func stopUwbSessions() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  /// The codec used by UwbHostApi.
  static var codec: FlutterStandardMessageCodec { UwbHostApiCodec.shared }
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?) {
    let getLocalUwbAddressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLocalUwbAddressChannel.setMessageHandler { _, reply in
        api.getLocalUwbAddress { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLocalUwbAddressChannel.setMessageHandler(nil)
    }
    let isUwbSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isUwbSupportedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isUwbSupported()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isUwbSupportedChannel.setMessageHandler(nil)
    }
    let startRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let peerAddressArg = args[0] as! FlutterStandardTypedData
        let configArg = args[1] as! UwbSessionConfig
        let isAccessoryArg = args[2] as! Bool
        do {
          try api.startRanging(peerAddress: peerAddressArg, config: configArg, isAccessory: isAccessoryArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startRangingChannel.setMessageHandler(nil)
    }
    let stopRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let peerAddressArg = args[0] as! FlutterStandardTypedData
        do {
          try api.stopRanging(peerAddress: peerAddressArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    let stopUwbSessionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopUwbSessionsChannel.setMessageHandler { _, reply in
        do {
          try api.stopUwbSessions()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopUwbSessionsChannel.setMessageHandler(nil)
    }
  }
}
private class UwbFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return UwbDevice.fromList(self.readValue() as! [Any?])
    case 129:
      return UwbRangingData.fromList(self.readValue() as! [Any?])
    case 130:
      return UwbSessionConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? UwbDevice {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? UwbRangingData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? UwbSessionConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbFlutterApiCodecWriter(data: data)
  }
}

class UwbFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbFlutterApiCodec(readerWriter: UwbFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onRangingResult(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRangingError(error errorArg: Any, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onPeerDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return UwbFlutterApiCodec.shared
  }
  func onRangingResult(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRangingError(error errorArg: Any, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onPeerDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDisconnected"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
