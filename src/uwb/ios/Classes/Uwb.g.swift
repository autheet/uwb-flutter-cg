// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum UwbDeviceState: Int {
  case connected = 0
  case disconnected = 1
  case ranging = 2
  case lost = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbRangingData {
  var distance: Double? = nil
  var azimuth: Double? = nil
  var elevation: Double? = nil

  static func fromList(_ list: [Any?]) -> UwbRangingData? {
    let distance: Double? = nilOrValue(list[0])
    let azimuth: Double? = nilOrValue(list[1])
    let elevation: Double? = nilOrValue(list[2])

    return UwbRangingData(
      distance: distance,
      azimuth: azimuth,
      elevation: elevation
    )
  }
  func toList() -> [Any?] {
    return [
      distance,
      azimuth,
      elevation,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbRangingDevice {
  var id: String
  var state: UwbDeviceState
  var data: UwbRangingData? = nil

  static func fromList(_ list: [Any?]) -> UwbRangingDevice? {
    let id = list[0] as! String
    let state = UwbDeviceState(rawValue: list[1] as! Int)!
    var data: UwbRangingData? = nil
    if let dataList: [Any?] = nilOrValue(list[2]) {
      data = UwbRangingData.fromList(dataList)
    }

    return UwbRangingDevice(
      id: id,
      state: state,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      state.rawValue,
      data?.toList(),
    ]
  }
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func isSupported(completion: @escaping (Result<Bool, Error>) -> Void)
  func getLocalEndpoint(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func startRanging(peerEndpoint: FlutterStandardTypedData, isController: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func stopRanging(completion: @escaping (Result<Void, Error>) -> Void)
  func closeSession(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  /// The codec used by UwbHostApi.
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?) {
    let isSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.isSupported", binaryMessenger: binaryMessenger)
    if let api = api {
      isSupportedChannel.setMessageHandler { _, reply in
        api.isSupported { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isSupportedChannel.setMessageHandler(nil)
    }
    let getLocalEndpointChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getLocalEndpoint", binaryMessenger: binaryMessenger)
    if let api = api {
      getLocalEndpointChannel.setMessageHandler { _, reply in
        api.getLocalEndpoint { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLocalEndpointChannel.setMessageHandler(nil)
    }
    let startRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      startRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let peerEndpointArg = args[0] as! FlutterStandardTypedData
        let isControllerArg = args[1] as! Bool
        api.startRanging(peerEndpoint: peerEndpointArg, isController: isControllerArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startRangingChannel.setMessageHandler(nil)
    }
    let stopRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", binaryMessenger: binaryMessenger)
    if let api = api {
      stopRangingChannel.setMessageHandler { _, reply in
        api.stopRanging { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    let closeSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.closeSession", binaryMessenger: binaryMessenger)
    if let api = api {
      closeSessionChannel.setMessageHandler { _, reply in
        api.closeSession { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      closeSessionChannel.setMessageHandler(nil)
    }
  }
}
private class UwbFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return UwbRangingData.fromList(self.readValue() as! [Any?])
    case 129:
      return UwbRangingDevice.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? UwbRangingData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? UwbRangingDevice {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbFlutterApiCodecWriter(data: data)
  }
}

class UwbFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = UwbFlutterApiCodec(readerWriter: UwbFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onRangingResult(device deviceArg: UwbRangingDevice, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return UwbFlutterApiCodec.shared
  }
  func onRangingResult(device deviceArg: UwbRangingDevice, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRangingError(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
