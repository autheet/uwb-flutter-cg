// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsUwb(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsUwb(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsUwb(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashUwb(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashUwb(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashUwb(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum DeviceType: Int {
  case smartphone = 0
  case accessory = 1
}

enum ErrorCode: Int {
  case uwbError = 0
  case uwbTooManySessions = 1
}

enum PermissionAction: Int {
  case request = 0
  case restart = 1
}

enum DeviceState: Int {
  case connected = 0
  case disconnected = 1
  case found = 2
  case lost = 3
  case rejected = 4
  case pending = 5
  case ranging = 6
}

/// Generated class from Pigeon that represents data sent in messages.
struct Direction3D: Hashable {
  var x: Double
  var y: Double
  var z: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Direction3D? {
    let x = pigeonVar_list[0] as! Double
    let y = pigeonVar_list[1] as! Double
    let z = pigeonVar_list[2] as! Double

    return Direction3D(
      x: x,
      y: y,
      z: z
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
      z,
    ]
  }
  static func == (lhs: Direction3D, rhs: Direction3D) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbData: Hashable {
  var distance: Double? = nil
  var azimuth: Double? = nil
  var elevation: Double? = nil
  var direction: Direction3D? = nil
  var horizontalAngle: Double? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UwbData? {
    let distance: Double? = nilOrValue(pigeonVar_list[0])
    let azimuth: Double? = nilOrValue(pigeonVar_list[1])
    let elevation: Double? = nilOrValue(pigeonVar_list[2])
    let direction: Direction3D? = nilOrValue(pigeonVar_list[3])
    let horizontalAngle: Double? = nilOrValue(pigeonVar_list[4])

    return UwbData(
      distance: distance,
      azimuth: azimuth,
      elevation: elevation,
      direction: direction,
      horizontalAngle: horizontalAngle
    )
  }
  func toList() -> [Any?] {
    return [
      distance,
      azimuth,
      elevation,
      direction,
      horizontalAngle,
    ]
  }
  static func == (lhs: UwbData, rhs: UwbData) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbDevice: Hashable {
  var id: String
  var name: String
  var uwbData: UwbData? = nil
  var deviceType: DeviceType
  var state: DeviceState? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UwbDevice? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String
    let uwbData: UwbData? = nilOrValue(pigeonVar_list[2])
    let deviceType = pigeonVar_list[3] as! DeviceType
    let state: DeviceState? = nilOrValue(pigeonVar_list[4])

    return UwbDevice(
      id: id,
      name: name,
      uwbData: uwbData,
      deviceType: deviceType,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      uwbData,
      deviceType,
      state,
    ]
  }
  static func == (lhs: UwbDevice, rhs: UwbDevice) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UwbSessionConfig: Hashable {
  var sessionId: Int64
  var sessionKeyInfo: FlutterStandardTypedData? = nil
  var channel: Int64
  var preambleIndex: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UwbSessionConfig? {
    let sessionId = pigeonVar_list[0] as! Int64
    let sessionKeyInfo: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[1])
    let channel = pigeonVar_list[2] as! Int64
    let preambleIndex = pigeonVar_list[3] as! Int64

    return UwbSessionConfig(
      sessionId: sessionId,
      sessionKeyInfo: sessionKeyInfo,
      channel: channel,
      preambleIndex: preambleIndex
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    ]
  }
  static func == (lhs: UwbSessionConfig, rhs: UwbSessionConfig) -> Bool {
    return deepEqualsUwb(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashUwb(value: toList(), hasher: &hasher)
  }
}

private class UwbPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return DeviceType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ErrorCode(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return PermissionAction(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return DeviceState(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      return Direction3D.fromList(self.readValue() as! [Any?])
    case 134:
      return UwbData.fromList(self.readValue() as! [Any?])
    case 135:
      return UwbDevice.fromList(self.readValue() as! [Any?])
    case 136:
      return UwbSessionConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UwbPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DeviceType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ErrorCode {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PermissionAction {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? DeviceState {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? Direction3D {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? UwbData {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? UwbDevice {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? UwbSessionConfig {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UwbPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UwbPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UwbPigeonCodecWriter(data: data)
  }
}

class UwbPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = UwbPigeonCodec(readerWriter: UwbPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UwbHostApi {
  func getLocalUwbAddress(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func isUwbSupported() throws -> Bool
  func startRanging(peerAddress: FlutterStandardTypedData, config: UwbSessionConfig) throws
  func stopRanging(peerAddress: String) throws
  func stopUwbSessions() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UwbHostApiSetup {
  static var codec: FlutterStandardMessageCodec { UwbPigeonCodec.shared }
  /// Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UwbHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getLocalUwbAddressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLocalUwbAddressChannel.setMessageHandler { _, reply in
        api.getLocalUwbAddress { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getLocalUwbAddressChannel.setMessageHandler(nil)
    }
    let isUwbSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isUwbSupportedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isUwbSupported()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isUwbSupportedChannel.setMessageHandler(nil)
    }
    let startRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.startRanging\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let peerAddressArg = args[0] as! FlutterStandardTypedData
        let configArg = args[1] as! UwbSessionConfig
        do {
          try api.startRanging(peerAddress: peerAddressArg, config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startRangingChannel.setMessageHandler(nil)
    }
    let stopRangingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRangingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let peerAddressArg = args[0] as! String
        do {
          try api.stopRanging(peerAddress: peerAddressArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopRangingChannel.setMessageHandler(nil)
    }
    let stopUwbSessionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopUwbSessionsChannel.setMessageHandler { _, reply in
        do {
          try api.stopUwbSessions()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopUwbSessionsChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol UwbFlutterApiProtocol {
  func onShareableConfigurationData(data dataArg: FlutterStandardTypedData, peerId peerIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRanging(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUwbSessionStarted(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUwbSessionDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onPermissionRequired(action actionArg: PermissionAction, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class UwbFlutterApi: UwbFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: UwbPigeonCodec {
    return UwbPigeonCodec.shared
  }
  func onShareableConfigurationData(data dataArg: FlutterStandardTypedData, peerId peerIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onShareableConfigurationData\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg, peerIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onRanging(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUwbSessionStarted(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUwbSessionDisconnected(device deviceArg: UwbDevice, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onPermissionRequired(action actionArg: PermissionAction, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([actionArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
