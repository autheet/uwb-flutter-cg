// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package net.christiangreiner.uwb;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Uwb.g {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RangingResult {
    private @NonNull String peerAddress;

    public @NonNull String getPeerAddress() {
      return peerAddress;
    }

    public void setPeerAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"peerAddress\" is null.");
      }
      this.peerAddress = setterArg;
    }

    private @NonNull String deviceName;

    public @NonNull String getDeviceName() {
      return deviceName;
    }

    public void setDeviceName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceName\" is null.");
      }
      this.deviceName = setterArg;
    }

    private @Nullable Double distance;

    public @Nullable Double getDistance() {
      return distance;
    }

    public void setDistance(@Nullable Double setterArg) {
      this.distance = setterArg;
    }

    private @Nullable Double azimuth;

    public @Nullable Double getAzimuth() {
      return azimuth;
    }

    public void setAzimuth(@Nullable Double setterArg) {
      this.azimuth = setterArg;
    }

    private @Nullable Double elevation;

    public @Nullable Double getElevation() {
      return elevation;
    }

    public void setElevation(@Nullable Double setterArg) {
      this.elevation = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RangingResult() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      RangingResult that = (RangingResult) o;
      return peerAddress.equals(that.peerAddress) && deviceName.equals(that.deviceName) && Objects.equals(distance, that.distance) && Objects.equals(azimuth, that.azimuth) && Objects.equals(elevation, that.elevation);
    }

    @Override
    public int hashCode() {
      return Objects.hash(peerAddress, deviceName, distance, azimuth, elevation);
    }

    public static final class Builder {

      private @Nullable String peerAddress;

      @CanIgnoreReturnValue
      public @NonNull Builder setPeerAddress(@NonNull String setterArg) {
        this.peerAddress = setterArg;
        return this;
      }

      private @Nullable String deviceName;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceName(@NonNull String setterArg) {
        this.deviceName = setterArg;
        return this;
      }

      private @Nullable Double distance;

      @CanIgnoreReturnValue
      public @NonNull Builder setDistance(@Nullable Double setterArg) {
        this.distance = setterArg;
        return this;
      }

      private @Nullable Double azimuth;

      @CanIgnoreReturnValue
      public @NonNull Builder setAzimuth(@Nullable Double setterArg) {
        this.azimuth = setterArg;
        return this;
      }

      private @Nullable Double elevation;

      @CanIgnoreReturnValue
      public @NonNull Builder setElevation(@Nullable Double setterArg) {
        this.elevation = setterArg;
        return this;
      }

      public @NonNull RangingResult build() {
        RangingResult pigeonReturn = new RangingResult();
        pigeonReturn.setPeerAddress(peerAddress);
        pigeonReturn.setDeviceName(deviceName);
        pigeonReturn.setDistance(distance);
        pigeonReturn.setAzimuth(azimuth);
        pigeonReturn.setElevation(elevation);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(5);
      toListResult.add(peerAddress);
      toListResult.add(deviceName);
      toListResult.add(distance);
      toListResult.add(azimuth);
      toListResult.add(elevation);
      return toListResult;
    }

    static @NonNull RangingResult fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      RangingResult pigeonResult = new RangingResult();
      Object peerAddress = pigeonVar_list.get(0);
      pigeonResult.setPeerAddress((String) peerAddress);
      Object deviceName = pigeonVar_list.get(1);
      pigeonResult.setDeviceName((String) deviceName);
      Object distance = pigeonVar_list.get(2);
      pigeonResult.setDistance((Double) distance);
      Object azimuth = pigeonVar_list.get(3);
      pigeonResult.setAzimuth((Double) azimuth);
      Object elevation = pigeonVar_list.get(4);
      pigeonResult.setElevation((Double) elevation);
      return pigeonResult;
    }
  }

  /**
   * A data class to hold all necessary UWB configuration parameters for the
   * FiRa accessory protocol. This ensures that both the controller and accessory
   * are using the exact same settings for the ranging session.
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class UwbConfig {
    /** Corresponds to RangingParameters.UwbConfigId (e.g., CONFIG_UNICAST_DS_TWR). */
    private @NonNull Long uwbConfigId;

    public @NonNull Long getUwbConfigId() {
      return uwbConfigId;
    }

    public void setUwbConfigId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uwbConfigId\" is null.");
      }
      this.uwbConfigId = setterArg;
    }

    /** The session ID for the ranging interaction. */
    private @NonNull Long sessionId;

    public @NonNull Long getSessionId() {
      return sessionId;
    }

    public void setSessionId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    /** The session key for securing the ranging data. */
    private @NonNull byte[] sessionKeyInfo;

    public @NonNull byte[] getSessionKeyInfo() {
      return sessionKeyInfo;
    }

    public void setSessionKeyInfo(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionKeyInfo\" is null.");
      }
      this.sessionKeyInfo = setterArg;
    }

    /** The UWB channel to be used. */
    private @NonNull Long channel;

    public @NonNull Long getChannel() {
      return channel;
    }

    public void setChannel(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channel\" is null.");
      }
      this.channel = setterArg;
    }

    /** The preamble index for the UWB signal. */
    private @NonNull Long preambleIndex;

    public @NonNull Long getPreambleIndex() {
      return preambleIndex;
    }

    public void setPreambleIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"preambleIndex\" is null.");
      }
      this.preambleIndex = setterArg;
    }

    /** The UWB address of the peer device (the one not generating this config). */
    private @NonNull byte[] peerAddress;

    public @NonNull byte[] getPeerAddress() {
      return peerAddress;
    }

    public void setPeerAddress(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"peerAddress\" is null.");
      }
      this.peerAddress = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UwbConfig() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      UwbConfig that = (UwbConfig) o;
      return uwbConfigId.equals(that.uwbConfigId) && sessionId.equals(that.sessionId) && Arrays.equals(sessionKeyInfo, that.sessionKeyInfo) && channel.equals(that.channel) && preambleIndex.equals(that.preambleIndex) && Arrays.equals(peerAddress, that.peerAddress);
    }

    @Override
    public int hashCode() {
      int pigeonVar_result = Objects.hash(uwbConfigId, sessionId, channel, preambleIndex);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(sessionKeyInfo);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(peerAddress);
      return pigeonVar_result;
    }

    public static final class Builder {

      private @Nullable Long uwbConfigId;

      @CanIgnoreReturnValue
      public @NonNull Builder setUwbConfigId(@NonNull Long setterArg) {
        this.uwbConfigId = setterArg;
        return this;
      }

      private @Nullable Long sessionId;

      @CanIgnoreReturnValue
      public @NonNull Builder setSessionId(@NonNull Long setterArg) {
        this.sessionId = setterArg;
        return this;
      }

      private @Nullable byte[] sessionKeyInfo;

      @CanIgnoreReturnValue
      public @NonNull Builder setSessionKeyInfo(@NonNull byte[] setterArg) {
        this.sessionKeyInfo = setterArg;
        return this;
      }

      private @Nullable Long channel;

      @CanIgnoreReturnValue
      public @NonNull Builder setChannel(@NonNull Long setterArg) {
        this.channel = setterArg;
        return this;
      }

      private @Nullable Long preambleIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreambleIndex(@NonNull Long setterArg) {
        this.preambleIndex = setterArg;
        return this;
      }

      private @Nullable byte[] peerAddress;

      @CanIgnoreReturnValue
      public @NonNull Builder setPeerAddress(@NonNull byte[] setterArg) {
        this.peerAddress = setterArg;
        return this;
      }

      public @NonNull UwbConfig build() {
        UwbConfig pigeonReturn = new UwbConfig();
        pigeonReturn.setUwbConfigId(uwbConfigId);
        pigeonReturn.setSessionId(sessionId);
        pigeonReturn.setSessionKeyInfo(sessionKeyInfo);
        pigeonReturn.setChannel(channel);
        pigeonReturn.setPreambleIndex(preambleIndex);
        pigeonReturn.setPeerAddress(peerAddress);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(6);
      toListResult.add(uwbConfigId);
      toListResult.add(sessionId);
      toListResult.add(sessionKeyInfo);
      toListResult.add(channel);
      toListResult.add(preambleIndex);
      toListResult.add(peerAddress);
      return toListResult;
    }

    static @NonNull UwbConfig fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      UwbConfig pigeonResult = new UwbConfig();
      Object uwbConfigId = pigeonVar_list.get(0);
      pigeonResult.setUwbConfigId((Long) uwbConfigId);
      Object sessionId = pigeonVar_list.get(1);
      pigeonResult.setSessionId((Long) sessionId);
      Object sessionKeyInfo = pigeonVar_list.get(2);
      pigeonResult.setSessionKeyInfo((byte[]) sessionKeyInfo);
      Object channel = pigeonVar_list.get(3);
      pigeonResult.setChannel((Long) channel);
      Object preambleIndex = pigeonVar_list.get(4);
      pigeonResult.setPreambleIndex((Long) preambleIndex);
      Object peerAddress = pigeonVar_list.get(5);
      pigeonResult.setPeerAddress((byte[]) peerAddress);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return RangingResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return UwbConfig.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof RangingResult) {
        stream.write(129);
        writeValue(stream, ((RangingResult) value).toList());
      } else if (value instanceof UwbConfig) {
        stream.write(130);
        writeValue(stream, ((UwbConfig) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface UwbHostApi {

    void start(@NonNull String deviceName, @NonNull String serviceUUIDDigest, @NonNull VoidResult result);

    void stop(@NonNull VoidResult result);

    void startIosController(@NonNull Result<byte[]> result);

    void startIosAccessory(@NonNull byte[] token, @NonNull VoidResult result);

    void getAccessoryAddress(@NonNull Result<byte[]> result);

    void generateControllerConfig(@NonNull byte[] accessoryAddress, @NonNull byte[] sessionKeyInfo, @NonNull Long sessionId, @NonNull Result<UwbConfig> result);

    void startAccessoryRanging(@NonNull UwbConfig config, @NonNull VoidResult result);

    /** The codec used by UwbHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable UwbHostApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable UwbHostApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.start" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String deviceNameArg = (String) args.get(0);
                String serviceUUIDDigestArg = (String) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.start(deviceNameArg, serviceUUIDDigestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stop" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stop(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startIosController" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<byte[]> resultCallback =
                    new Result<byte[]>() {
                      public void success(byte[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startIosController(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startIosAccessory" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] tokenArg = (byte[]) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startIosAccessory(tokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.getAccessoryAddress" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<byte[]> resultCallback =
                    new Result<byte[]>() {
                      public void success(byte[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAccessoryAddress(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.generateControllerConfig" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] accessoryAddressArg = (byte[]) args.get(0);
                byte[] sessionKeyInfoArg = (byte[]) args.get(1);
                Long sessionIdArg = (Long) args.get(2);
                Result<UwbConfig> resultCallback =
                    new Result<UwbConfig>() {
                      public void success(UwbConfig result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.generateControllerConfig(accessoryAddressArg, sessionKeyInfoArg, sessionIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startAccessoryRanging" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UwbConfig configArg = (UwbConfig) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startAccessoryRanging(configArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class UwbFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public UwbFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public UwbFlutterApi(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by UwbFlutterApi.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void onRangingResult(@NonNull RangingResult resultArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(resultArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onRangingError(@NonNull String errorArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(errorArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onBleDataReceived(@NonNull byte[] dataArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onBleDataReceived" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(dataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPeerDiscovered(@NonNull String deviceNameArg, @NonNull String peerAddressArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDiscovered" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(deviceNameArg, peerAddressArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPeerLost(@NonNull String deviceNameArg, @NonNull String peerAddressArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerLost" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(deviceNameArg, peerAddressArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
