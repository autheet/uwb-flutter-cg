// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package net.christiangreiner.uwb

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class DeviceType(val raw: Int) {
  SMARTPHONE(0),
  ACCESSORY(1);

  companion object {
    fun ofRaw(raw: Int): DeviceType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ErrorCode(val raw: Int) {
  UWB_ERROR(0),
  UWB_TOO_MANY_SESSIONS(1);

  companion object {
    fun ofRaw(raw: Int): ErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PermissionAction(val raw: Int) {
  REQUEST(0),
  RESTART(1);

  companion object {
    fun ofRaw(raw: Int): PermissionAction? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DeviceState(val raw: Int) {
  CONNECTED(0),
  DISCONNECTED(1),
  FOUND(2),
  LOST(3),
  REJECTED(4),
  PENDING(5),
  RANGING(6);

  companion object {
    fun ofRaw(raw: Int): DeviceState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Direction3D (
  val x: Double,
  val y: Double,
  val z: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Direction3D {
      val x = list[0] as Double
      val y = list[1] as Double
      val z = list[2] as Double
      return Direction3D(x, y, z)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      x,
      y,
      z,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbData (
  val distance: Double? = null,
  val azimuth: Double? = null,
  val elevation: Double? = null,
  val direction: Direction3D? = null,
  val horizontalAngle: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbData {
      val distance = list[0] as Double?
      val azimuth = list[1] as Double?
      val elevation = list[2] as Double?
      val direction: Direction3D? = (list[3] as List<Any?>?)?.let {
        Direction3D.fromList(it)
      }
      val horizontalAngle = list[4] as Double?
      return UwbData(distance, azimuth, elevation, direction, horizontalAngle)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      distance,
      azimuth,
      elevation,
      direction?.toList(),
      horizontalAngle,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbDevice (
  val id: String,
  val name: String,
  val uwbData: UwbData? = null,
  val deviceType: DeviceType,
  val state: DeviceState? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbDevice {
      val id = list[0] as String
      val name = list[1] as String
      val uwbData: UwbData? = (list[2] as List<Any?>?)?.let {
        UwbData.fromList(it)
      }
      val deviceType = DeviceType.ofRaw(list[3] as Int)!!
      val state: DeviceState? = (list[4] as Int?)?.let {
        DeviceState.ofRaw(it)
      }
      return UwbDevice(id, name, uwbData, deviceType, state)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      uwbData?.toList(),
      deviceType.raw,
      state?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbSessionConfig (
  val sessionId: Long,
  val sessionKeyInfo: ByteArray? = null,
  val channel: Long,
  val preambleIndex: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbSessionConfig {
      val sessionId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val sessionKeyInfo = list[1] as ByteArray?
      val channel = list[2].let { if (it is Int) it.toLong() else it as Long }
      val preambleIndex = list[3].let { if (it is Int) it.toLong() else it as Long }
      return UwbSessionConfig(sessionId, sessionKeyInfo, channel, preambleIndex)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object UwbHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbSessionConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is UwbSessionConfig -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UwbHostApi {
  fun getLocalUwbAddress(callback: (Result<ByteArray>) -> Unit)
  fun isUwbSupported(): Boolean
  fun startRanging(peerAddress: ByteArray, config: UwbSessionConfig)
  fun stopRanging(peerAddress: String)
  fun stopUwbSessions()

  companion object {
    /** The codec used by UwbHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbHostApiCodec
    }
    /** Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: UwbHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getLocalUwbAddress() { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isUwbSupported())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peerAddressArg = args[0] as ByteArray
            val configArg = args[1] as UwbSessionConfig
            var wrapped: List<Any?>
            try {
              api.startRanging(peerAddressArg, configArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peerAddressArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.stopRanging(peerAddressArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopUwbSessions()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object UwbFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Direction3D.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbData.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbDevice.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Direction3D -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is UwbData -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is UwbDevice -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class UwbFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by UwbFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbFlutterApiCodec
    }
  }
  fun onRanging(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionStarted(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionDisconnected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPermissionRequired(actionArg: PermissionAction, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(actionArg.raw)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
