// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object UwbPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class DeviceType(val raw: Int) {
  SMARTPHONE(0),
  ACCESSORY(1);

  companion object {
    fun ofRaw(raw: Int): DeviceType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ErrorCode(val raw: Int) {
  UWB_ERROR(0),
  UWB_TOO_MANY_SESSIONS(1);

  companion object {
    fun ofRaw(raw: Int): ErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PermissionAction(val raw: Int) {
  REQUEST(0),
  RESTART(1);

  companion object {
    fun ofRaw(raw: Int): PermissionAction? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DeviceState(val raw: Int) {
  CONNECTED(0),
  DISCONNECTED(1),
  FOUND(2),
  LOST(3),
  REJECTED(4),
  PENDING(5),
  RANGING(6);

  companion object {
    fun ofRaw(raw: Int): DeviceState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Direction3D (
  val x: Double,
  val y: Double,
  val z: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Direction3D {
      val x = pigeonVar_list[0] as Double
      val y = pigeonVar_list[1] as Double
      val z = pigeonVar_list[2] as Double
      return Direction3D(x, y, z)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      x,
      y,
      z,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is Direction3D) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbData (
  val distance: Double? = null,
  val azimuth: Double? = null,
  val elevation: Double? = null,
  val direction: Direction3D? = null,
  val horizontalAngle: Double? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UwbData {
      val distance = pigeonVar_list[0] as Double?
      val azimuth = pigeonVar_list[1] as Double?
      val elevation = pigeonVar_list[2] as Double?
      val direction = pigeonVar_list[3] as Direction3D?
      val horizontalAngle = pigeonVar_list[4] as Double?
      return UwbData(distance, azimuth, elevation, direction, horizontalAngle)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      distance,
      azimuth,
      elevation,
      direction,
      horizontalAngle,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UwbData) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbDevice (
  val id: String,
  val name: String,
  val uwbData: UwbData? = null,
  val deviceType: DeviceType,
  val state: DeviceState? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UwbDevice {
      val id = pigeonVar_list[0] as String
      val name = pigeonVar_list[1] as String
      val uwbData = pigeonVar_list[2] as UwbData?
      val deviceType = pigeonVar_list[3] as DeviceType
      val state = pigeonVar_list[4] as DeviceState?
      return UwbDevice(id, name, uwbData, deviceType, state)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      name,
      uwbData,
      deviceType,
      state,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UwbDevice) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbSessionConfig (
  val sessionId: Long,
  val sessionKeyInfo: ByteArray? = null,
  val channel: Long,
  val preambleIndex: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UwbSessionConfig {
      val sessionId = pigeonVar_list[0] as Long
      val sessionKeyInfo = pigeonVar_list[1] as ByteArray?
      val channel = pigeonVar_list[2] as Long
      val preambleIndex = pigeonVar_list[3] as Long
      return UwbSessionConfig(sessionId, sessionKeyInfo, channel, preambleIndex)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UwbSessionConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class UwbPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DeviceType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ErrorCode.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PermissionAction.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DeviceState.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Direction3D.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbData.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbDevice.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbSessionConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DeviceType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ErrorCode -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PermissionAction -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is DeviceState -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is Direction3D -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is UwbData -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is UwbDevice -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is UwbSessionConfig -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UwbHostApi {
  fun getLocalUwbAddress(callback: (Result<ByteArray>) -> Unit)
  fun isUwbSupported(): Boolean
  fun startRanging(peerAddress: ByteArray, config: UwbSessionConfig)
  fun stopRanging(peerAddress: String)
  fun stopUwbSessions()

  companion object {
    /** The codec used by UwbHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbPigeonCodec()
    }
    /** Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: UwbHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getLocalUwbAddress{ result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(UwbPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isUwbSupported())
            } catch (exception: Throwable) {
              UwbPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startRanging$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peerAddressArg = args[0] as ByteArray
            val configArg = args[1] as UwbSessionConfig
            val wrapped: List<Any?> = try {
              api.startRanging(peerAddressArg, configArg)
              listOf(null)
            } catch (exception: Throwable) {
              UwbPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peerAddressArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.stopRanging(peerAddressArg)
              listOf(null)
            } catch (exception: Throwable) {
              UwbPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopUwbSessions()
              listOf(null)
            } catch (exception: Throwable) {
              UwbPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class UwbFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by UwbFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbPigeonCodec()
    }
  }
  fun onRanging(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionStarted(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionDisconnected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onPermissionRequired(actionArg: PermissionAction, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(actionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
