// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package net.christiangreiner.uwb

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is UwbError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): UwbError {
  return UwbError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class UwbError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class UwbDeviceState(val raw: Int) {
  CONNECTED(0),
  DISCONNECTED(1),
  RANGING(2),
  LOST(3);

  companion object {
    fun ofRaw(raw: Int): UwbDeviceState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbRangingData (
  val distance: Double? = null,
  val azimuth: Double? = null,
  val elevation: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbRangingData {
      val distance = list[0] as Double?
      val azimuth = list[1] as Double?
      val elevation = list[2] as Double?
      return UwbRangingData(distance, azimuth, elevation)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      distance,
      azimuth,
      elevation,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbRangingDevice (
  val id: String,
  val state: UwbDeviceState,
  val data: UwbRangingData? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbRangingDevice {
      val id = list[0] as String
      val state = UwbDeviceState.ofRaw(list[1] as Int)!!
      val data: UwbRangingData? = (list[2] as List<Any?>?)?.let {
        UwbRangingData.fromList(it)
      }
      return UwbRangingDevice(id, state, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      state.raw,
      data?.toList(),
    )
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UwbHostApi {
  fun isSupported(callback: (Result<Boolean>) -> Unit)
  fun getLocalEndpoint(callback: (Result<ByteArray>) -> Unit)
  fun startRanging(peerEndpoint: ByteArray, isController: Boolean, callback: (Result<Unit>) -> Unit)
  fun stopRanging(callback: (Result<Unit>) -> Unit)
  fun closeSession(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by UwbHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: UwbHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.isSupported", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.isSupported() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.getLocalEndpoint", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getLocalEndpoint() { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peerEndpointArg = args[0] as ByteArray
            val isControllerArg = args[1] as Boolean
            api.startRanging(peerEndpointArg, isControllerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopRanging() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.closeSession", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.closeSession() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object UwbFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbRangingData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbRangingDevice.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is UwbRangingData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is UwbRangingDevice -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class UwbFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by UwbFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbFlutterApiCodec
    }
  }
  fun onRangingResult(deviceArg: UwbRangingDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(UwbError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onRangingError(errorArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(UwbError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
