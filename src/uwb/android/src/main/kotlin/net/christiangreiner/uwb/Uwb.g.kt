// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object UwbPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class RangingResult (
  val peerAddress: String,
  val deviceName: String,
  val distance: Double? = null,
  val azimuth: Double? = null,
  val elevation: Double? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RangingResult {
      val peerAddress = pigeonVar_list[0] as String
      val deviceName = pigeonVar_list[1] as String
      val distance = pigeonVar_list[2] as Double?
      val azimuth = pigeonVar_list[3] as Double?
      val elevation = pigeonVar_list[4] as Double?
      return RangingResult(peerAddress, deviceName, distance, azimuth, elevation)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      peerAddress,
      deviceName,
      distance,
      azimuth,
      elevation,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RangingResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A data class to hold all necessary UWB configuration parameters for the
 * FiRa accessory protocol. This ensures that both the controller and accessory
 * are using the exact same settings for the ranging session.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class UwbConfig (
  /** Corresponds to RangingParameters.UwbConfigId (e.g., CONFIG_UNICAST_DS_TWR). */
  val uwbConfigId: Long,
  /** The session ID for the ranging interaction. */
  val sessionId: Long,
  /** The session key for securing the ranging data. */
  val sessionKeyInfo: ByteArray,
  /** The UWB channel to be used. */
  val channel: Long,
  /** The preamble index for the UWB signal. */
  val preambleIndex: Long,
  /** The UWB address of the peer device (the one not generating this config). */
  val peerAddress: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UwbConfig {
      val uwbConfigId = pigeonVar_list[0] as Long
      val sessionId = pigeonVar_list[1] as Long
      val sessionKeyInfo = pigeonVar_list[2] as ByteArray
      val channel = pigeonVar_list[3] as Long
      val preambleIndex = pigeonVar_list[4] as Long
      val peerAddress = pigeonVar_list[5] as ByteArray
      return UwbConfig(uwbConfigId, sessionId, sessionKeyInfo, channel, preambleIndex, peerAddress)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      uwbConfigId,
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
      peerAddress,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UwbConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return UwbPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class UwbPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RangingResult.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is RangingResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is UwbConfig -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UwbHostApi {
  fun start(deviceName: String, serviceUUIDDigest: String, callback: (Result<Unit>) -> Unit)
  fun stop(callback: (Result<Unit>) -> Unit)
  fun startIosController(callback: (Result<ByteArray>) -> Unit)
  fun startIosAccessory(token: ByteArray, callback: (Result<Unit>) -> Unit)
  fun getAccessoryAddress(callback: (Result<ByteArray>) -> Unit)
  fun generateControllerConfig(accessoryAddress: ByteArray, sessionKeyInfo: ByteArray, sessionId: Long, callback: (Result<UwbConfig>) -> Unit)
  fun startAccessoryRanging(config: UwbConfig, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by UwbHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbPigeonCodec()
    }
    /** Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: UwbHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.start$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceNameArg = args[0] as String
            val serviceUUIDDigestArg = args[1] as String
            api.start(deviceNameArg, serviceUUIDDigestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                reply.reply(UwbPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stop$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stop{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                reply.reply(UwbPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startIosController$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startIosController{ result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(UwbPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startIosAccessory$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tokenArg = args[0] as ByteArray
            api.startIosAccessory(tokenArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                reply.reply(UwbPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.getAccessoryAddress$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAccessoryAddress{ result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(UwbPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.generateControllerConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val accessoryAddressArg = args[0] as ByteArray
            val sessionKeyInfoArg = args[1] as ByteArray
            val sessionIdArg = args[2] as Long
            api.generateControllerConfig(accessoryAddressArg, sessionKeyInfoArg, sessionIdArg) { result: Result<UwbConfig> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(UwbPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startAccessoryRanging$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as UwbConfig
            api.startAccessoryRanging(configArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(UwbPigeonUtils.wrapError(error))
              } else {
                reply.reply(UwbPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class UwbFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by UwbFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbPigeonCodec()
    }
  }
  fun onRangingResult(resultArg: RangingResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onRangingError(errorArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onBleDataReceived(dataArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onBleDataReceived$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(dataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onPeerDiscovered(deviceNameArg: String, peerAddressArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDiscovered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceNameArg, peerAddressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onPeerLost(deviceNameArg: String, peerAddressArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerLost$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceNameArg, peerAddressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(UwbPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
