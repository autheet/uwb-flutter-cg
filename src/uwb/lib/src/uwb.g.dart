// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class UwbRangingData {
  UwbRangingData({
    this.distance,
    this.azimuth,
    this.elevation,
  });

  double? distance;

  double? azimuth;

  double? elevation;

  Object encode() {
    return <Object?>[
      distance,
      azimuth,
      elevation,
    ];
  }

  static UwbRangingData decode(Object result) {
    result as List<Object?>;
    return UwbRangingData(
      distance: result[0] as double?,
      azimuth: result[1] as double?,
      elevation: result[2] as double?,
    );
  }
}

/// Represents a UWB-capable device.
/// The name is discovered via the out-of-band BLE channel.
/// The rangingData is nullable because a device might be discovered via BLE
/// before UWB ranging has started.
class UwbDevice {
  UwbDevice({
    required this.address,
    required this.name,
    this.rangingData,
  });

  Uint8List address;

  String name;

  UwbRangingData? rangingData;

  Object encode() {
    return <Object?>[
      address,
      name,
      rangingData?.encode(),
    ];
  }

  static UwbDevice decode(Object result) {
    result as List<Object?>;
    return UwbDevice(
      address: result[0]! as Uint8List,
      name: result[1]! as String,
      rangingData: result[2] != null
          ? UwbRangingData.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class UwbSessionConfig {
  UwbSessionConfig({
    required this.sessionId,
    this.sessionKeyInfo,
    required this.channel,
    required this.preambleIndex,
  });

  int sessionId;

  Uint8List? sessionKeyInfo;

  int channel;

  int preambleIndex;

  Object encode() {
    return <Object?>[
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    ];
  }

  static UwbSessionConfig decode(Object result) {
    result as List<Object?>;
    return UwbSessionConfig(
      sessionId: result[0]! as int,
      sessionKeyInfo: result[1] as Uint8List?,
      channel: result[2]! as int,
      preambleIndex: result[3]! as int,
    );
  }
}

class _UwbHostApiCodec extends StandardMessageCodec {
  const _UwbHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is UwbSessionConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return UwbSessionConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class UwbHostApi {
  /// Constructor for [UwbHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UwbHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _UwbHostApiCodec();

  Future<Uint8List> getLocalUwbAddress() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<bool> isUwbSupported() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> startRanging(Uint8List peerAddress, UwbSessionConfig config, bool isAccessory) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.startRanging';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[peerAddress, config, isAccessory]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopRanging(Uint8List peerAddress) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopRanging';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[peerAddress]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopUwbSessions() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _UwbFlutterApiCodec extends StandardMessageCodec {
  const _UwbFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is UwbDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is UwbRangingData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UwbSessionConfig) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return UwbDevice.decode(readValue(buffer)!);
      case 129: 
        return UwbRangingData.decode(readValue(buffer)!);
      case 130: 
        return UwbSessionConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class UwbFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _UwbFlutterApiCodec();

  void onRangingResult(UwbDevice device);

  void onRangingError(Object error);

  void onPeerDisconnected(UwbDevice device);

  static void setup(UwbFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingResult was null, expected non-null UwbDevice.');
          try {
            api.onRangingResult(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Object? arg_error = (args[0] as Object?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRangingError was null, expected non-null Object.');
          try {
            api.onRangingError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDisconnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onPeerDisconnected was null, expected non-null UwbDevice.');
          try {
            api.onPeerDisconnected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
