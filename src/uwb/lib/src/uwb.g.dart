// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum DeviceType {
  smartphone,
  accessory,
}

enum ErrorCode {
  OOB_ERROR,
  OOB_DEVICE_ALREADY_CONNECTED,
  OOB_CONNECTION_ERROR,
  OOB_DEVICE_NOT_FOUND,
  OOB_ALREADY_ADVERTISING,
  OOB_ALREADY_DISCOVERING,
  OOB_SENDING_DATA_FAILED,
  UWB_ERROR,
  UWB_TOO_MANY_SESSIONS,
}

enum PermissionAction {
  request,
  restart,
}

enum DeviceState {
  connected,
  disconnected,
  found,
  lost,
  rejected,
  pending,
  ranging,
}

/// Direction for iOS
class Direction3D {
  Direction3D({
    required this.x,
    required this.y,
    required this.z,
  });

  /// The x component of the vector.
  double x;

  /// The y component of the vector.
  double y;

  /// The z component of the vector.
  double z;

  Object encode() {
    return <Object?>[
      x,
      y,
      z,
    ];
  }

  static Direction3D decode(Object result) {
    result as List<Object?>;
    return Direction3D(
      x: result[0]! as double,
      y: result[1]! as double,
      z: result[2]! as double,
    );
  }
}

/// UWB Data for Android and iOS
class UwbData {
  UwbData({
    this.distance,
    this.azimuth,
    this.elevation,
    this.direction,
    this.horizontalAngle,
  });

  /// Android API: The line-of-sight distance in meters of the ranging device, or null if not available.
  /// Apple API: The distance from the user's device to the peer device in meters.
  double? distance;

  /// Android API: The azimuth angle in degrees of the ranging device, or null if not available.
  double? azimuth;

  /// Android API: The elevation angle in degrees of the ranging device, or null if not available.
  double? elevation;

  /// Apple API: A vector that points from the userâ€™s device in the direction of the peer device.
  /// If direction is null, the peer device is out of view.
  Direction3D? direction;

  /// Apple API: An angle in radians that indicates the azimuthal direction to the nearby object.
  /// The framework sets a value of this property when cameraAssistanceEnabled is true.
  /// iOS: >= iOS 16.0
  double? horizontalAngle;

  Object encode() {
    return <Object?>[
      distance,
      azimuth,
      elevation,
      direction?.encode(),
      horizontalAngle,
    ];
  }

  static UwbData decode(Object result) {
    result as List<Object?>;
    return UwbData(
      distance: result[0] as double?,
      azimuth: result[1] as double?,
      elevation: result[2] as double?,
      direction: result[3] != null
          ? Direction3D.decode(result[3]! as List<Object?>)
          : null,
      horizontalAngle: result[4] as double?,
    );
  }
}

/// Represents a UWB device for Android and iOS.
class UwbDevice {
  UwbDevice({
    required this.id,
    required this.name,
    this.uwbData,
    required this.deviceType,
    this.state,
  });

  String id;

  String name;

  UwbData? uwbData;

  DeviceType deviceType;

  DeviceState? state;

  Object encode() {
    return <Object?>[
      id,
      name,
      uwbData?.encode(),
      deviceType.index,
      state?.index,
    ];
  }

  static UwbDevice decode(Object result) {
    result as List<Object?>;
    return UwbDevice(
      id: result[0]! as String,
      name: result[1]! as String,
      uwbData: result[2] != null
          ? UwbData.decode(result[2]! as List<Object?>)
          : null,
      deviceType: DeviceType.values[result[3]! as int],
      state: result[4] != null
          ? DeviceState.values[result[4]! as int]
          : null,
    );
  }
}

class _UwbHostApiCodec extends StandardMessageCodec {
  const _UwbHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Direction3D) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is UwbData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UwbDevice) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Direction3D.decode(readValue(buffer)!);
      case 129: 
        return UwbData.decode(readValue(buffer)!);
      case 130: 
        return UwbDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class UwbHostApi {
  /// Constructor for [UwbHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UwbHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _UwbHostApiCodec();

  Future<void> discoverDevices(String deviceName) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.discoverDevices';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[deviceName]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopDiscovery';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> handleConnectionRequest(UwbDevice device, bool accept) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.handleConnectionRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[device, accept]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isUwbSupported() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> startRanging(UwbDevice device) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.startRanging';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[device]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopRanging(UwbDevice device) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopRanging';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[device]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopUwbSessions() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _UwbFlutterApiCodec extends StandardMessageCodec {
  const _UwbFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Direction3D) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is UwbData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UwbDevice) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Direction3D.decode(readValue(buffer)!);
      case 129: 
        return UwbData.decode(readValue(buffer)!);
      case 130: 
        return UwbDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class UwbFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _UwbFlutterApiCodec();

  void onHostDiscoveryDeviceConnected(UwbDevice device);

  void onHostDiscoveryDeviceDisconnected(UwbDevice device);

  void onHostDiscoveryDeviceFound(UwbDevice device);

  void onHostDiscoveryDeviceLost(UwbDevice device);

  void onHostDiscoveryDeviceRejected(UwbDevice device);

  void onHostDiscoveryConnectionRequestReceived(UwbDevice device);

  void onHostPermissionRequired(PermissionAction action);

  void onHostUwbSessionStarted(UwbDevice device);

  void onHostUwbSessionDisconnected(UwbDevice device);

  void _buildTrigger(ErrorCode code, DeviceState state);

  static void setup(UwbFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceConnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceConnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceConnected was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryDeviceConnected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceDisconnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceDisconnected was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryDeviceDisconnected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceFound', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceFound was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceFound was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryDeviceFound(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceLost', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceLost was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceLost was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryDeviceLost(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceRejected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceRejected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryDeviceRejected was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryDeviceRejected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryConnectionRequestReceived', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryConnectionRequestReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostDiscoveryConnectionRequestReceived was null, expected non-null UwbDevice.');
          try {
            api.onHostDiscoveryConnectionRequestReceived(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostPermissionRequired', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostPermissionRequired was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PermissionAction? arg_action = args[0] == null ? null : PermissionAction.values[args[0]! as int];
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostPermissionRequired was null, expected non-null PermissionAction.');
          try {
            api.onHostPermissionRequired(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionStarted', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionStarted was null, expected non-null UwbDevice.');
          try {
            api.onHostUwbSessionStarted(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionDisconnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onHostUwbSessionDisconnected was null, expected non-null UwbDevice.');
          try {
            api.onHostUwbSessionDisconnected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi._buildTrigger', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi._buildTrigger was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ErrorCode? arg_code = args[0] == null ? null : ErrorCode.values[args[0]! as int];
          assert(arg_code != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi._buildTrigger was null, expected non-null ErrorCode.');
          final DeviceState? arg_state = args[1] == null ? null : DeviceState.values[args[1]! as int];
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi._buildTrigger was null, expected non-null DeviceState.');
          try {
            api._buildTrigger(arg_code!, arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
