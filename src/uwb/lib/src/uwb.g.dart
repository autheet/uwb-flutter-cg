// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum DeviceType {
  smartphone,
  accessory,
}

enum ErrorCode {
  uwbError,
  uwbTooManySessions,
}

enum PermissionAction {
  request,
  restart,
}

enum DeviceState {
  connected,
  disconnected,
  found,
  lost,
  rejected,
  pending,
  ranging,
  unknown,
}

class Direction3D {
  Direction3D({
    required this.x,
    required this.y,
    required this.z,
  });

  double x;

  double y;

  double z;

  Object encode() {
    return <Object?>[
      x,
      y,
      z,
    ];
  }

  static Direction3D decode(Object result) {
    result as List<Object?>;
    return Direction3D(
      x: result[0]! as double,
      y: result[1]! as double,
      z: result[2]! as double,
    );
  }
}

class UwbData {
  UwbData({
    this.distance,
    this.azimuth,
    this.elevation,
    this.direction,
    this.horizontalAngle,
  });

  double? distance;

  double? azimuth;

  double? elevation;

  Direction3D? direction;

  double? horizontalAngle;

  Object encode() {
    return <Object?>[
      distance,
      azimuth,
      elevation,
      direction?.encode(),
      horizontalAngle,
    ];
  }

  static UwbData decode(Object result) {
    result as List<Object?>;
    return UwbData(
      distance: result[0] as double?,
      azimuth: result[1] as double?,
      elevation: result[2] as double?,
      direction: result[3] != null
          ? Direction3D.decode(result[3]! as List<Object?>)
          : null,
      horizontalAngle: result[4] as double?,
    );
  }
}

class UwbDevice {
  UwbDevice({
    required this.id,
    this.name,
    this.uwbData,
    this.deviceType,
    this.state,
  });

  String id;

  String? name;

  UwbData? uwbData;

  DeviceType? deviceType;

  DeviceState? state;

  Object encode() {
    return <Object?>[
      id,
      name,
      uwbData?.encode(),
      deviceType?.index,
      state?.index,
    ];
  }

  static UwbDevice decode(Object result) {
    result as List<Object?>;
    return UwbDevice(
      id: result[0]! as String,
      name: result[1] as String?,
      uwbData: result[2] != null
          ? UwbData.decode(result[2]! as List<Object?>)
          : null,
      deviceType: result[3] != null
          ? DeviceType.values[result[3]! as int]
          : null,
      state: result[4] != null
          ? DeviceState.values[result[4]! as int]
          : null,
    );
  }
}

class UwbConfig {
  UwbConfig({
    required this.sessionId,
    this.sessionKeyInfo,
    required this.channel,
    required this.preambleIndex,
  });

  int sessionId;

  Uint8List? sessionKeyInfo;

  int channel;

  int preambleIndex;

  Object encode() {
    return <Object?>[
      sessionId,
      sessionKeyInfo,
      channel,
      preambleIndex,
    ];
  }

  static UwbConfig decode(Object result) {
    result as List<Object?>;
    return UwbConfig(
      sessionId: result[0]! as int,
      sessionKeyInfo: result[1] as Uint8List?,
      channel: result[2]! as int,
      preambleIndex: result[3]! as int,
    );
  }
}

class _UwbHostApiCodec extends StandardMessageCodec {
  const _UwbHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is UwbConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return UwbConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class UwbHostApi {
  /// Constructor for [UwbHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UwbHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _UwbHostApiCodec();

  Future<Uint8List> getLocalUwbAddress() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.getLocalUwbAddress';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<bool> isUwbSupported() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> startControllerSession(UwbConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.startControllerSession';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAccessorySession(UwbConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.startAccessorySession';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startPeerSession(Uint8List peerToken, UwbConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.startPeerSession';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[peerToken, config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopRanging(String peerAddress) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopRanging';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[peerAddress]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopUwbSessions() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.uwb.UwbHostApi.stopUwbSessions';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _UwbFlutterApiCodec extends StandardMessageCodec {
  const _UwbFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Direction3D) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is UwbData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UwbDevice) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Direction3D.decode(readValue(buffer)!);
      case 129: 
        return UwbData.decode(readValue(buffer)!);
      case 130: 
        return UwbDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class UwbFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _UwbFlutterApiCodec();

  void onShareableConfigurationData(Uint8List data, String peerId);

  void onRanging(UwbDevice device);

  void onUwbSessionStarted(UwbDevice device);

  void onUwbSessionDisconnected(UwbDevice device);

  void onPermissionRequired(PermissionAction action);

  static void setup(UwbFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onShareableConfigurationData', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onShareableConfigurationData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_data = (args[0] as Uint8List?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onShareableConfigurationData was null, expected non-null Uint8List.');
          final String? arg_peerId = (args[1] as String?);
          assert(arg_peerId != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onShareableConfigurationData was null, expected non-null String.');
          try {
            api.onShareableConfigurationData(arg_data!, arg_peerId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onRanging was null, expected non-null UwbDevice.');
          try {
            api.onRanging(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted was null, expected non-null UwbDevice.');
          try {
            api.onUwbSessionStarted(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UwbDevice? arg_device = (args[0] as UwbDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected was null, expected non-null UwbDevice.');
          try {
            api.onUwbSessionDisconnected(arg_device!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PermissionAction? arg_action = args[0] == null ? null : PermissionAction.values[args[0]! as int];
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.uwb.UwbFlutterApi.onPermissionRequired was null, expected non-null PermissionAction.');
          try {
            api.onPermissionRequired(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
